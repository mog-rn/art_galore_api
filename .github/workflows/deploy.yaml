name: Deploy to Development Environment(Cloud Run)

on:
    push:
      branches:
        - main
  
env:
    PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    GAR_LOCATION: ${{ secrets.GCP_REGION }}
    SERVICE: ${{ secrets.SERVICE_NAME }}
    REGION: ${{ secrets.GCP_REGION }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate gcloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_KEY }}

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Ensure GAR Repository Exists
        run: |
          if ! gcloud artifacts repositories describe ${{ secrets.GAR_REPOSITORY_NAME }} --location=${{ secrets.GCP_REGION }} --format='value(name)'; then
            gcloud artifacts repositories create ${{ secrets.GAR_REPOSITORY_NAME }} \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --repository-format=docker \
              --location=${{ secrets.GCP_REGION }} \
              --description="Docker repository"
          else
            echo "Repository ${{ secrets.GAR_REPOSITORY_NAME }} already exists."
          fi
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - uses: actions/checkout@v2

      # Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Authenticate gcloud CLI
      - name: Authenticate gcloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_KEY }}

      # Configure Docker
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet


      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY_NAME }}/${{ secrets.SERVICE_NAME }}:$GITHUB_SHA .
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY_NAME }}/${{ secrets.SERVICE_NAME }}:$GITHUB_SHA

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      # Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Authenticate gcloud CLI
      - name: Authenticate gcloud CLI
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_KEY }}

      - name: Create Environment Variables File
        run: |
            echo "DATABASE_URL: \"${{ secrets.DATABASE_URL }}\"" > env-vars.yaml
            echo "SENDGRID_API_KEY: \"${{ secrets.SENDGRID_API_KEY }}\"" >> env-vars.yaml
            echo "BASE_URL: \"${{ secrets.BASE_URL }}\"" >> env-vars.yaml
            echo "CLOUDINARY_NAME: \"${{ secrets.CLOUDINARY_NAME }}\"" >> env-vars.yaml
            echo "CLOUDINARY_API_KEY: \"${{ secrets.CLOUDINARY_API_KEY }}\"" >> env-vars.yaml
            echo "CLOUDINARY_API_SECRET: \"${{ secrets.CLOUDINARY_API_SECRET }}\"" >> env-vars.yaml
            
        env:
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
            BASE_URL: ${{ secrets.BASE_URL }}
            CLOUDINARY_NAME: ${{ secrets.CLOUDINARY_NAME }}
            CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
            CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.SERVICE_NAME }} \
            --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY_NAME }}/${{ secrets.SERVICE_NAME }}:$GITHUB_SHA \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --env-vars-file=env-vars.yaml \
            --allow-unauthenticated